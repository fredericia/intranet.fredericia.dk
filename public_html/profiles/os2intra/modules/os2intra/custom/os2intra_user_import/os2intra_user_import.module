<?php
/**
 *
 * @author Thomas Thune Hansen <tth@bellcom.dk>
 * @copyright bellcom open source aps
 */

/**
 * Implements hook_menu()
 */
function os2intra_user_import_menu() {
  $items = array();

  $items['admin/config/os2intra/user_import'] = array(
    'title'            => 'OS2Intra User import',
    'description'      => 'Administer user import',
    'page callback'    => 'system_admin_menu_block_page',
    'access arguments' => array('administer os2intra user import'),
    'file path'        => drupal_get_path('module', 'system'),
    'file'             => 'system.admin.inc',
    'weight'           => -5,
  );

  $items['admin/config/os2intra/user_import/settings'] = array(
    'title'            => 'Settings',
    'description'      => 'Administer user import settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('os2intra_user_import_settings'),
    'access arguments' => array('administer os2intra user import'),
  );

  $items['admin/config/os2intra/user_import/log'] = array(
    'title'            => 'Log',
    'description'      => 'View user import log',
    'page callback'    => 'os2intra_user_import_log',
    'access arguments' => array('administer os2intra user import'),
  );

  $items['admin/config/os2intra/user_import/overview'] = array(
    'title'            => 'Overview',
    'description'      => 'View imported users',
    'page callback'    => 'os2intra_user_import_overview',
    'access arguments' => array('administer os2intra user import'),
  );

  $items['useractivation'] = array(
    'title'           => 'User activation',
    'page callback'   => 'os2intra_user_import_activate',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function os2intra_user_import_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'edit_profile_user_profile_form') {
    if (!user_access('administer os2intra user import')) {
      $form['og_org_ref']['#access'] = 0;
      $form['field_os2intra_employee_id']['#access'] = 0;
      $form['field_os2intra_termination_date']['#access'] = 0;
    }
  }
  if ($form_id == 'taxonomy_form_term') {
    if ($form['#term']['vocabulary_machine_name'] == 'os2intra_organisation_tax') {
      $form['#submit'][] = "os2intra_user_import_add_managers_to_departments";
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function os2intra_user_import_form_os2intra_settings_settings_form_alter(&$form, &$form_state, $form_id) {

  $form['os2intra_user_import_activate'] = array(
    '#type' => 'fieldset',
    '#title' => t('User activation'),
    '#collapsible' => TRUE,
  );

  $form['os2intra_user_import_activate']['activation_fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Validate first login by'),
  );

  $form['os2intra_user_import_activate']['activation_fields']['os2intra_user_import_activate_identification'] = array(
    '#title' => t('User identification'),
    '#type' => 'select',
    '#options' => array(
      'ad_id' => t('AD id'),
      'employee_id' => ('Employee number'),
    ),
    '#default_value' => variable_get('os2intra_user_import_activate_identification', 'employee_id'),
  );

  $form['os2intra_user_import_activate']['activation_fields']['os2intra_user_import_activate_birthday'] = array(
    '#title' => t('Birthday'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('os2intra_user_import_activate_birthday', TRUE),
  );

  $form['os2intra_user_import_activate']['activation_fields']['os2intra_user_import_activate_email'] = array(
    '#title' => t('Email address'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('os2intra_user_import_activate_email', TRUE),
  );
}

/**
 * User activation form
 */
function os2intra_user_import_activate_form($form_state) {

  switch (variable_get('os2intra_user_import_activate_identification')) {
    case 'ad_id':
      $form['ad_id'] = array(
        '#type'  => 'textfield',
        '#title' => t('AD Id'),
      );
      break;

    case 'employee_id':
      $form['employee_id'] = array(
        '#type'  => 'textfield',
        '#title' => t('Employee Id'),
      );
      break;
  }

  if (variable_get('os2intra_user_import_activate_email')) {
    $form['mail'] = array(
      '#type'  => 'textfield',
      '#title' => t('E-mail adress'),
    );
  }

  if (variable_get('os2intra_user_import_activate_birthday')) {
    $form['birthdate'] = array(
      '#type'        => 'textfield',
      '#title'       => t('Birthdate'),
      '#description' => t('First 6 characters of your CPR-number (format: 070593)'),
    );
  }

  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Implements hook_form_validate()
 */
function os2intra_user_import_activate_form_validate($form, &$form_state) {

  $identification_method = variable_get('os2intra_user_import_activate_identification');
  $error = FALSE;

  // Check if employee is valid
  if ($identification_method == 'employee_id') {

    // Check by employee id
    $employee_id = (int) $form_state['values']['employee_id'];

    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'user');
    $query->propertyCondition('status', 1);
    $query->fieldCondition('field_os2intra_employee_id', 'value', $employee_id, 'LIKE');
    $tmp_result = $query->execute();
    $result = array_shift($tmp_result);

    if (!$result) {
      $error = TRUE;
      form_set_error('employee_id', t('Invalid employee id'));
    }
  }
  elseif ($identification_method == 'ad_id') {

    // Check by AD id
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'user');
    $query->propertyCondition('status', 1);
    $query->propertyCondition('name', $form_state['values']['ad_id'], 'LIKE');
    $tmp_result = $query->execute();
    $result = array_shift($tmp_result);

    if (!$result) {
      $error = TRUE;
      form_set_error('ad_id', t('Invalid AD id'));
    }
  }

  if (!$error) {
    $form_state['uid'] = key($result);
    $user = user_load($form_state['uid']);

    // We check if user is already activated by looking at the last login date.
    if (is_object($user)) {
      if ($user->login > 0) {
        form_set_error('employee_id', t('Employee already activated'));
      }

      // Check if we should validate by birthday
      if (variable_get('os2intra_user_import_activate_birthday')) {

        // Check if birthdate is valid format
        $input_birthday = $form_state['values']['birthdate'];
        if (!ctype_digit($input_birthday) && strlen($input_birthday) !== 6) {
          form_set_error('birthdate', t('Birthdate: Invalid format.'));
        }

        // Check if it matches the users birthday field
        $birthday_field = field_get_items('user', $user, 'field_os2intra_birthdate');
        if ($input_birthday !== $birthday_field[0]['value']) {
          form_set_error('form', 'Please check your input.');
        }
      }

      // Check if we should validate by email
      if (variable_get('os2intra_user_import_activate_email')) {

        // Check if email address is valid and not empty
        if (!valid_email_address($form_state['values']['mail']) || empty(($form_state['values']['mail']))) {
          form_set_error('mail', t('Invalid email address.'));
        }
      }
    }
  }
}

/**
 * Implements hook_form_submit()
 */
function os2intra_user_import_activate_form_submit($form, &$form_state) {
  $password = user_password(8);

  $change = array(
    'mail' => $form_state['values']['mail'],
    'pass' => $password
  );
  $user = user_load($form_state['uid']);

  user_save($user, $change);

  if (_user_mail_notify('register_no_approval_required', $user)) {
    drupal_set_message(t('A mail has been sent to: ') . $form_state['values']['mail']);
  }
}

/**
 * Page callback for user activation
 */
function os2intra_user_import_activate() {
  return drupal_get_form('os2intra_user_import_activate_form');
}

/**
 * Implements hook_permission()
 */
function os2intra_user_import_permission() {
  return array(
    'administer os2intra user import' => array(
      'title'       => t('Administer OS2Intra User import'),
      'description' => t('Perform administration tasks for user import.'),
    ),
  );
}

/**
 * Form callback for settings
 */
function os2intra_user_import_settings() {
  $csv_cols = array(
    'none' => t('None'),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
  );

  $form['placeholder'] = array(
    '#type'   => 'item',
    '#markup' => t('This module does not provide a cron hook. This has to be set up manually, by adding the import script to the crontab'),
  );

  $form['os2intra_user_import_enable'] = array(
    '#title'         => t('Enable user import'),
    '#type'          => 'checkbox',
    '#default_value' => variable_get('os2intra_user_import_enable', FALSE)
  );

  $form['os2intra_user_import_dir'] = array(
    '#title'         => t('Directory containing CSV with users'),
    '#type'          => 'textfield',
    '#required'      => TRUE,
    '#description'   => t('ex. private://user_import'),
    '#default_value' => variable_get('os2intra_user_import_dir', 'private://user_import')
  );
  $form['os2intra_user_import_file_name'] = array(
    '#title'         => t('CSV file name'),
    '#type'          => 'textfield',
    '#required'      => TRUE,
    '#description'   => t('ex. FK-user_import (without extension .csv, without space)'),
    '#default_value' => variable_get('os2intra_user_import_file_name', 'FK-user_import'),
  );
  $form['os2intra_user_import_delimiter'] = array(
    '#title'         => t('CSV delimiter'),
    '#type'          => 'textfield',
    '#description'   => t('The delimiter used to separate values in the CSV, ex. a semicolon, a comma or \t (tab)'),
    '#default_value' => variable_get('os2intra_user_import_delimiter', ';'),
  );

  $form['os2intra_user_default_groups'] = array(
    '#title'         => t('Node ids (nid) of default OG groups, that should be added to every imported used'),
    '#type'          => 'textfield',
    '#description'   => t('CSV, ex. 1,2,3'),
    '#default_value' => variable_get('os2intra_user_default_groups')
  );

  $form['os2intra_user_notification_email'] = array(
    '#title'         => t('Email address that should be notified when new departments are created'),
    '#type'          => 'textfield',
    '#default_value' => variable_get('os2intra_user_notification_email', variable_get('site_mail')),
  );

  $form['os2intra_user_import_og_role_id_parent'] = array(
    '#title'         => t('Parent OG Role Grant ID'),
    '#type'          => 'textfield',
    '#default_value' => variable_get('os2intra_user_import_og_role_id_parent', 14),
    '#description'   => t('ID of the group role to grant the user, when added to parent groups.'),
  );

  $form['os2intra_user_import_og_role_id_user'] = array(
    '#title'         => t('Primary OG Role Grant ID'),
    '#type'          => 'textfield',
    '#default_value' => variable_get('os2intra_user_import_og_role_id_primary', 16),
    '#description'   => t('ID of the group role to grant the user, when added to primary group.'),
  );

  $form['os2intra_user_import_og_role_id_manager'] = array(
    '#title'         => t('Manager OG Role Grant ID'),
    '#type'          => 'textfield',
    '#default_value' => variable_get('os2intra_user_import_og_role_id_manager', 15),
    '#description'   => t('ID of the group role to grant the user, when added to manager group.'),
  );

  $form['os2intra_user_import_authmap_name_suffix'] = array(
    '#title'         => t("Suffix used on the column 'authname' in the authmap table"),
    '#type'          => 'textfield',
    '#default_value' => variable_get('os2intra_user_import_authmap_name_suffix'),
    '#description'   => t("For example '@fredericia.dk'"),
  );

  $form['mapping'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Mapping'),
    '#collapsible' => FALSE,
  );

  $form['mapping']['description'] = array(
    '#type'   => 'item',
    '#markup' => t('Select columns in the CSV file corresponding to the data'),
  );

  $form['mapping']['os2intra_mapping_ad_id'] = array(
    '#type'          => 'select',
    '#title'         => t('AD id'),
    '#required'      => TRUE,
    '#options'       => $csv_cols,
    '#default_value' => variable_get('os2intra_mapping_ad_id'),
  );

  $form['mapping']['os2intra_mapping_first_name'] = array(
    '#type'          => 'select',
    '#title'         => t('Firstname'),
    '#required'      => TRUE,
    '#options'       => $csv_cols,
    '#default_value' => variable_get('os2intra_mapping_first_name'),
  );

  $form['mapping']['os2intra_mapping_last_name'] = array(
    '#type'          => 'select',
    '#title'         => t('Lastname'),
    '#required'      => TRUE,
    '#options'       => $csv_cols,
    '#default_value' => variable_get('os2intra_mapping_last_name'),
  );

  $form['mapping']['os2intra_mapping_department'] = array(
    '#type'          => 'select',
    '#title'         => t('Department'),
    '#required'      => TRUE,
    '#options'       => $csv_cols,
    '#default_value' => variable_get('os2intra_mapping_department'),
  );

  $form['mapping']['os2intra_mapping_department_shortname'] = array(
    '#type'          => 'select',
    '#title'         => t('Department short name'),
    '#options'       => $csv_cols,
    '#default_value' => variable_get('os2intra_mapping_department_shortname'),
  );

  $form['mapping']['os2intra_mapping_centre'] = array(
    '#type'          => 'select',
    '#title'         => t('Centre'),
    '#options'       => $csv_cols,
    '#default_value' => variable_get('os2intra_mapping_centre'),
  );

  $form['mapping']['os2intra_mapping_employee_id'] = array(
    '#type'          => 'select',
    '#title'         => t('Employee id'),
    '#options'       => $csv_cols,
    '#default_value' => variable_get('os2intra_mapping_employee_id'),
  );

  $form['mapping']['os2intra_mapping_job_description'] = array(
    '#type'          => 'select',
    '#title'         => t('Job description'),
    '#options'       => $csv_cols,
    '#default_value' => variable_get('os2intra_mapping_job_description'),
  );

  $form['mapping']['os2intra_mapping_termination_date'] = array(
    '#type'          => 'select',
    '#title'         => t('Termination date'),
    '#options'       => $csv_cols,
    '#default_value' => variable_get('os2intra_mapping_termination_date'),
  );

  $form['mapping']['os2intra_mapping_phone'] = array(
    '#type'          => 'select',
    '#title'         => t('Phone Number'),
    '#options'       => $csv_cols,
    '#default_value' => variable_get('os2intra_mapping_phone'),
  );

  $form['mapping']['os2intra_mapping_mobile'] = array(
    '#type'          => 'select',
    '#title'         => t('Mobile Number'),
    '#options'       => $csv_cols,
    '#default_value' => variable_get('os2intra_mapping_mobile'),
  );

  $form['mapping']['os2intra_mapping_email'] = array(
    '#type'          => 'select',
    '#title'         => t('Email Address'),
    '#options'       => $csv_cols,
    '#default_value' => variable_get('os2intra_mapping_email'),
  );

  $form['mapping']['os2intra_mapping_birthdate'] = array(
    '#type'          => 'select',
    '#title'         => t('Birthdate'),
    '#options'       => $csv_cols,
    '#default_value' => variable_get('os2intra_mapping_birthdate'),
  );

  $form['cleanup_help_block'] = array(
    '#type'   => 'item',
    '#title'  => t('Cleanup script'),
    '#markup' => '<ul><li>Deletes all terms in the vocabulary "os2intra_organization_tax"</li><li>Deletes all users with only one role "authenticated user"</li></ul><br>Run using: Run using drush scr ../scripts/delete_imported_data.php',
  );
  return system_settings_form($form);
}

/**
 * Implements hook_form_validate()
 */
function os2intra_user_import_settings_validate(&$form, &$form_state) {
  $values = array();
  foreach ($form_state['values'] as $field => $value) {
    if (strstr($field, 'os2intra_mapping')) {
      // If same column is selected twice throw error
      if (in_array($value, $values) && $value != 'none') {
        form_set_error($field, t('Cannot use column twice'));
      }

      $values[] = $value;
    }
  }

  if ($form_state['values']['os2intra_user_default_groups']) {
    $default_groups = explode(',', $form_state['values']['os2intra_user_default_groups']);
    foreach ($default_groups as $group) {
      $node = node_load($group);
      if (!$node || $node->type != 'os2intra_org_group_unit') {
        form_set_error('os2intra_user_default_groups', t('Must be a valid NID of type organic groups (OG)'));
      }
    }
  }
}

/**
 * Implements hook_form_ID_alter()
 */
function os2intra_user_import_form_user_login_alter(&$form, &$form_state, $form_id) {
  // Add link for user activation to login form
  $form['activate_user'] = array(
    '#type'   => 'item',
    '#markup' => l(t('Activate user'), 'useractivation'),
  );
}

/**
 * Page callback for log
 */
function os2intra_user_import_log() {
  try {
    $result = db_select('os2intra_user_import_log', 'l')
      ->fields('l')
      ->orderBy('created', 'DESC')
      ->execute()
      ->fetchAll();
  } catch (Exception $e) {
    $result = array();
  }

  foreach ($result as $row) {
    $rows[] = array($row->message, date('d-m-y H:i:s', $row->created));
  }

  $header = array(t('Message'), t('Date'));

  return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * Page callback for overview
 */
function os2intra_user_import_overview() {
  return views_embed_view('os2intra_user_import', 'block');
}

/**
 * User import wrapper function
 */
function os2intra_user_import_run_with_drush() {
  if (variable_get('os2intra_user_import_enable', FALSE)) {
    setlocale(LC_ALL, "en_DK.UTF-8");
    $import_dir = variable_get('os2intra_user_import_dir', 'private://user_import');

    $realpath = '';

    $filename = variable_get('os2intra_user_import_file_name', 'FK-user_import');

    $dir = reset(file_scan_directory($import_dir, '/' . $filename . '.csv/'));
    if ($dir) {
      $realpath = drupal_realpath($dir->uri);
    }

    if (file_exists($realpath)) {

      os2intra_user_import_clear_log();
      os2intra_user_import_save_log('', 'Starting import');
      // Parse file, map data accordingly
      $users = _os2intra_user_import_process_file($realpath);

      // Check and create groups
      os2intra_user_import_groups($users);

      // Check for users that already exist
      $update_users = os2intra_user_import_check_users($users);

      os2intra_user_import_save_log('', 'User import');

      // Loop over users and create
      foreach ($users as $user) {
        os2intra_user_import_save_user($user);
      }

      // Update users
      foreach ($update_users as $uid => $user) {
        os2intra_user_import_save_user($user, $uid);
      }

      // Disable users
      os2intra_user_import_disable_users();

      // Logging
      os2intra_user_import_save_log('', 'User import finished');
      os2intra_user_import_save_log('', 'Import finished');
    }
    else {
      os2intra_user_import_save_log('', 'File does not exist');
    }
  }
}

/**
 * Disable users according to termination date
 */
function os2intra_user_import_disable_users() {
  os2intra_user_import_save_log('', 'Start disabling users');
  $timestamp = strtotime('midnight tomorrow');

  // Query all users with termination date today.
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'user');
  $query->fieldCondition('field_os2intra_termination_date', 'value', $timestamp, '<');
  $query->fieldCondition('field_os2intra_termination_date', 'value', 1, '>');
  $query->propertyCondition('status', 1);
  $result = reset($query->execute());

  // Array holding new status for user
  $disable_array = array('status' => 0);

  // Disable users
  if (is_array($result)) {
    foreach ($result as $uid => $item) {
      os2intra_user_import_save_log('', 'Disable uid: ' . $uid);
      user_save(user_load($uid), $disable_array);
    }
  }
  os2intra_user_import_save_log('', 'User disabling finished');
}

/**
 * Helper function to parse file contents to array with relevant info
 */
function _os2intra_user_import_process_file($file_path) {

  // CSV field mapping
  // rewrite for settings page?
  $map = array(
    variable_get('os2intra_mapping_ad_id')                => 'ad_id',
    variable_get('os2intra_mapping_employee_id')          => 'employee_id',
    variable_get('os2intra_mapping_first_name')           => 'first_name',
    variable_get('os2intra_mapping_last_name')            => 'last_name',
    variable_get('os2intra_mapping_department')           => 'department',
    variable_get('os2intra_mapping_department_shortname') => 'department_shortname',
    variable_get('os2intra_mapping_centre')               => 'centre',
    variable_get('os2intra_mapping_job_description')      => 'job_description',
    variable_get('os2intra_mapping_termination_date')     => 'termination_date',
    variable_get('os2intra_mapping_phone')                => 'phone',
    variable_get('os2intra_mapping_mobile')               => 'mobile',
    variable_get('os2intra_mapping_email')                => 'email',
    variable_get('os2intra_mapping_birthdate')            => 'birthdate',
  );

  // Load data from file
  $csv = array_map(function($d) {
    return str_getcsv($d, variable_get('os2intra_user_import_delimiter'));
  }, file($file_path));
  $at_content = FALSE;

  foreach ($csv as $row) {

    // Look for where headings start and ignore everything before the headings.
    if (!$at_content
      && (!array_key_exists(variable_get('os2intra_mapping_ad_id'), $row)
     || $row[variable_get('os2intra_mapping_ad_id')] =! 'AD-ID')) {

      continue;
    }
    else {
      $at_content = TRUE;
    }

    // SKip if row has no user name
    if ($row[variable_get('os2intra_mapping_ad_id')] == '') {
      continue;
    }

    // Parse mapping
    foreach ($row as $key => $field) {
      // If there is a mapping for the key
      if ($map[$key]) {
        $mapped_row[$map[$key]] = _os2intra_user_import_sanitize_int($field);
      }
    }
    $rows[] = $mapped_row;
  }

  // Skip first row, headers
  unset($rows[0]);
  return $rows;
}

/**
 * Check if the user is already created in the system
 */
function os2intra_user_import_check_users(&$users) {
  $update_users = array();

  foreach ($users as $key => $user) {
    $ad_id = $user['ad_id'];

    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'user');
    $query->propertyCondition('name', $ad_id);
    $result = $query->execute();

    // Unset users already created
    if ($result) {
      $update_users[key(array_shift($result))] = $user;

      unset($users[$key]);
    }

    if (!$user['first_name'] || !$user['employee_id']) {
      unset($users[$key]);
    }
  }

  return $update_users;
}

/**
 * Create/update user
 * If a uid is sent the user will be updated, otherwise a new user will be created.
 * The user has multiple group connections, some are from the import file, and some
 * are set manually in the system. In order to preserve the manually set groups we
 * save the imported values in field_os2intra_import_groups, we then diff this
 * field with og_user_node to find out what groups are set manually (the diff).
 * These are then readded to the users groups, along with the organisational groups
 * from the import file.
 * Group id 2 (Odsherred kommune) is a different story, all users should be
 * members of this group, and therefore we add it manually to all.
 *
 * @author Thomas Thune Hansen <tth@bellcom.dk>
 *
 * @param
 *  user array from file parser
 *
 */
function os2intra_user_import_save_user($user, $uid = '') {
  // Load users account, if any
  $account = user_load($uid);

  $keep_groups = array();
  $no_import_groups = FALSE;

  // Load users values from account
  if (is_object($account)) {
    $og_user_node = array();
    $import_groups = array();
    // Get a list of current group nids
    if ($og_user_node_field = field_get_items('user', $account, 'og_user_node2')) { // gruppemedlemskab
      foreach ($og_user_node_field as $key => $field) {
        $og_user_node[$field['target_id']] = $field['target_id'];
      }
    }
    // And organisation and centre nid from last import
    if ($import_group_field = field_get_items('user', $account, 'og_org_ref')) { // afdeling
      foreach ($import_group_field as $key => $field) {
        $import_groups[$field['target_id']] = $field['target_id'];
      }
    }
    // The diff will be the groups the user should keep.
    if (!empty($import_groups)) {
      $keep_groups = array_diff($og_user_node, $import_groups);
      // Group id 2 is unset as we add this to all users later.
      unset($keep_groups[2]);
    }
    else {
      // Keep all groups, if there are no import groups
      $keep_groups = $og_user_node;
      $no_import_groups = TRUE;
    }
  }

  // Get node id for group
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node');
  $query->propertyCondition('title', $user['department']);
  $result = $query->execute();

  if (!empty($result['node'])) {

    $new_group_nid = key(array_shift($result));

    // Attach new group.
    // We rebuild the association completely so we start with an empty
    // array.
    $user_groups = array();
    if (variable_get('os2intra_user_default_groups')) {
      $def_groups = explode(',', variable_get('os2intra_user_default_groups'));
      foreach ($def_groups as $def_group) {
        $user_groups[LANGUAGE_NONE][]['target_id'] = $def_group;
      }
    }
    $user_groups[LANGUAGE_NONE][]['target_id'] = $new_group_nid;

    // In field_os2intra_import_groups we store the group ids
    // imported, for both organisation unit and center.
    // On the next import, we need this to find out what groups the
    // user has been added to, that are not organisational.
    $import_groups = array();
    $import_groups[LANGUAGE_NONE][]['target_id'] = $new_group_nid;
  }

  // Get node id for centre
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'taxonomy_term');
  $query->fieldCondition('field_os2intra_department_id', 'value', $user['centre'], '=');
  $result = $query->execute();


  if (!empty($result['taxonomy_term'])) {
    $centre_nid = key(array_shift($result));
    $user_groups[LANGUAGE_NONE][]['target_id'] = $centre_nid;

    // Don't do duplicates
    if ($new_group_nid !== $centre_nid) {
      $import_groups[LANGUAGE_NONE][]['target_id'] = $centre_nid;
    }
  }

  // If there are no import groups, we add the groups, the user had at import.
  // import groups will be set during this import, so next time, this should
  // not be an issue.
  // This is only done in order to migrate user groups, from users before the
  // import groups field was added.
  if ($no_import_groups) {
    $user_groups = array();
  }

  // Add back the groups we want to keep.
  foreach ($keep_groups as $group_id) {
    $user_groups[LANGUAGE_NONE][]['target_id'] = $group_id;
  }

  // @todo: check that timestamp is not today
  $termination_date_timestamp = $user['termination_date'];
  // Check if the timestamp supplied from the import is larger than
  // what unix timestamps can be.
  if ($termination_date_timestamp > 2147483647) {
    $termination_date_timestamp = 1;
  }

  // User title tid
  $title_tid = os2intra_user_import_user_title($user['job_description']);

  // Get user membership to department
  $department_nid = _os2intra_user_import_get_department_nid($user['department']);

  // Populate fields
  $fields = array(

    // Set employee_id
    'field_os2intra_employee_id'      => array(LANGUAGE_NONE => array(0 => array('value' => $user['employee_id']))),

    // First Name
    'field_name_first'                => array(LANGUAGE_NONE => array(0 => array('value' => $user['first_name']))),

    // Last Name
    'field_name_last'                 => array(LANGUAGE_NONE => array(0 => array('value' => $user['last_name']))),

    // Phone
    'field_os2intra_phone'            => array(LANGUAGE_NONE => array(0 => array('value' => $user['phone']))),

    // Mobile
    'field_os2intra_mobile'            => array(LANGUAGE_NONE => array(0 => array('value' => $user['mobile']))),

    // Set birthdate
    'field_os2intra_birthdate'        => array(LANGUAGE_NONE => array(0 => array('value' => $user['birthdate']))),

    // Set department membership
    'og_user_node2'                   => array(LANGUAGE_NONE => array(0 => array('target_id' => array($department_nid)))),


    // Activate user
    'status'                          => ($account->uid != 0) ? $account->status : 1,

    'mail'                            => $user['email'],

    'init'                            => $user['email'],

    'timezone'                        => 'Europe/Copenhagen',
  );

  // For some reason, the first zero is chopped somewhere. Let's add it.
  if (strlen($user['birthdate']) < 6) {
    $fields['field_os2intra_birthdate'] = array(LANGUAGE_NONE => array(0 => array('value' => '0' . $user['birthdate'])));
  }

  // Job description
  if ($title_tid) {
    $fields['field_os2intra_user_titles'] = array(LANGUAGE_NONE => array(0 => array('target_id' => $title_tid)));
  }

  // Termination date
  if ($termination_date_timestamp) {
    $fields['field_os2intra_termination_date'] = array(LANGUAGE_NONE => array(0 => array('value' => $termination_date_timestamp)));
  }

  // Handle whether we're updating or creating a new user
  // if we're updating we don't generate username and sets password
  if (!is_numeric($uid)) {
    $password = user_password(8);

    // Generate username
    $fields['name'] = $user['ad_id'];
    $fields['pass'] = $password;
  }

  // Save user
  $account = user_save($account, $fields);

  // Set department membership and role
  $values = array(
    'entity' => $account,
    'field_name' => 'og_user_node2',
  );
  og_group('node', $department_nid, $values);
  og_role_grant('node', $department_nid, $account->uid, variable_get('os2intra_user_import_og_role_id_primary', 16));


  // Create authmap for user
  $authmap = array(
    'authname_simplesamlphp_auth' => $user['ad_id'] . variable_get('os2intra_user_import_authmap_name_suffix'),
  );

  if (!user_get_authmaps($authmap)) {
    user_set_authmaps($account, $authmap);
  }

  // Add users to parent departments
  os2intra_user_import_add_user_to_parent_departments($account);

  // Write log entry
  if ($uid) {
    os2intra_user_import_save_log($user['employee_id'], 'update user: ' . $user['employee_id'] . ' ' . $user['first_name'] . ' ' . $user['last_name'] . 'status: ' . $user['status']);
  }
  else {
    os2intra_user_import_save_log($user['employee_id'], 'create user: ' . $user['first_name'] . 'status: ' . $user['status']);
  }
}

/**
 * Create groups for users
 *
 * @param
 *  array of users with groups
 */
function os2intra_user_import_groups($users) {

  // Array holding created terms. For email use later.
  $created_terms = array();

  os2intra_user_import_save_log('', 'Import groups');

  $vocab = taxonomy_vocabulary_machine_name_load('os2intra_organisation_tax');
  $tree = taxonomy_get_tree($vocab->vid);

  // find first term with no parents
  // used as default parent tid later
  foreach ($tree as $term) {
    if ($term->parents[0] == 0) {
      $default_parent_tid = $term->tid;
      break;
    }
  }

  foreach ($users as $user) {

    $group = $user['department'];
    $parent_tid = $default_parent_tid;

    // Check if term already exists
    $result = os2intra_user_import_query_term_by_department($group);

    if (!empty($result)) {
      os2intra_user_import_save_log('', 'Group already exists: ' . $group);
      os2intra_user_import_create_department(key($result['taxonomy_term']), $user['department']);
    }
    else {
      // Create taxonomy terms
      os2intra_user_import_save_log('', 'Create group: ' . $group);

      // Search for parent tid for department
      $result = os2intra_user_import_query_term_by_department($user['centre']);

      if (!empty($result)) {
        $parent_term = taxonomy_term_load(key($result['taxonomy_term']));
        $parent_tid = $parent_term->tid;
      }

      $term = new stdClass();
      $term->name = $group;
      $term->parent = array($parent_tid);
      $term->field_os2intra_department_id[LANGUAGE_NONE][0]['value'] = $group;
      $term->field_os2intra_shortname[LANGUAGE_NONE][0]['value'] = $user['department_shortname'];
      $term->vid = $vocab->vid;

      taxonomy_term_save($term);
      $created_terms[] = $term;

      os2intra_user_import_create_department($term->tid, $user['department']);
    }

    os2intra_user_import_save_log('', 'Finished importing groups');
  }

  // Send email that new groups has been created
  if (count($created_terms > 0)) {
    _os2intra_user_import_send_email($created_terms);
  }
}

/**
 * Create department nodes
 */
function os2intra_user_import_create_department($tid, $department) {

  // Check if department node already exists. If so, then do nothing.
  $nid = _os2intra_user_import_get_department_nid($department);
  if ($nid) {
    return;
  }

  // Find term title
  $term = taxonomy_term_load($tid);
  $name = $term->name;

  // Create group nodes
  $node = new stdClass();

  // Title and type
  $node->title = $name;
  $node->type = 'os2intra_org_group_unit';

  // Generic node stuff
  node_object_prepare($node);

  $node->language = 'da';
  $node->uid = 1;
  $node->status = 1;

  // For some reason, we need to save the node and load it again, before we can assign values to fields
  $node = node_submit($node);
  node_save($node);

  // Set organization term
  $node->field_os2intra_organisation[LANGUAGE_NONE][]['target_id'] = $tid;

  // Save department id on node
  if (field_info_instance('taxonomy_term', 'field_os2intra_department_id', 'os2intra_org_group_unit')) {
    $node->field_os2intra_department_id[LANGUAGE_NONE][0]['value'] = $department;
  }

  // Group type "Organisation"
  // Todo: make more generic
  if (field_info_instance('node', 'field_os2intra_grouptype', 'os2intra_org_group_unit')) {
    $node->field_os2intra_grouptype[LANGUAGE_NONE][0]['tid'] = 6;
  }

  // Closed group, require invitation
  if (field_info_instance('node', 'field_og_subscribe_settings', 'os2intra_org_group_unit')) {
    $node->field_og_subscribe_settings[LANGUAGE_NONE][0]['value'] = 'invitation';
  }

  $node = node_submit($node);
  node_save($node);
}

/**
 * Searches for terms by department id and resturns an EntityFieldQuery result.
 */
function os2intra_user_import_query_term_by_department($department_id) {
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'taxonomy_term');
  $query->fieldCondition('field_os2intra_department_id', 'value', $department_id, '=');
  $result = $query->execute();

  return $result;
}

/**
 * Notify via email that new departments has been created.
 */
function _os2intra_user_import_send_email($terms) {

  global $base_url;

  $body = "The list below contains name and URL of created departments:\n\n";

  // Loop through terms and build email body
  foreach ($terms as $term) {
    $body.= $term->name . ' ' . $base_url . '/' . drupal_get_path_alias('taxonomy/term/' . $term->tid) . "\n";
  }

  // Build and send email to administrator, that a new department has been created.
  $params = array(
    'subject' => t('New department has been created'),
    'body' => $body,
  );
  $to = variable_get('os2intra_user_notification_email', variable_get('site_mail'));

  drupal_mail('os2intra_user_import', 'os2intra_user_notification_email', $to, language_default(), $params);
}

/**
 * Save log message to db
 */
function os2intra_user_import_save_log($uuid, $message) {
  try {
    db_insert('os2intra_user_import_log')
      ->fields(array(
        'uuid'    => $uuid,
        'message' => $message,
        'created' => time(),
      ))
      ->execute();

    return TRUE;

  } catch (PDOException $e) {
    return FALSE;
  }
}

/**
 * Clear log
 */
function os2intra_user_import_clear_log() {
  try {
    db_query('DELETE FROM {os2intra_user_import_log} WHERE 1')->execute();
    return TRUE;

  } catch (PDOException $e) {
    return FALSE;
  }
}

/**
 * Helper for user title
 */
function os2intra_user_import_user_title($job_description) {
  $term = reset(taxonomy_get_term_by_name($job_description));

  // Create new taxonomy term
  if (!is_object($term)) {
    $vocab = taxonomy_vocabulary_machine_name_load('user_jobtitle');
    $term = new stdClass();

    $term->name = $job_description;
    $term->vid = $vocab->vid;

    taxonomy_term_save($term);
  }

  return $term->tid;
}

/**
 * Implements hook_mail().
 */
function os2intra_user_import_mail($key, &$message, $params) {
  switch ($key) {
    case 'os2intra_user_notification_email':

      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
  }
}

function _os2intra_user_import_get_department_nid($department) {

  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'taxonomy_term');
  $query->fieldCondition('field_os2intra_department_id', 'value', $department, '=');
  $result = $query->execute();

  if (count($result['taxonomy_term']) > 0) {
    $tid = key($result['taxonomy_term']);

    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', 'os2intra_org_group_unit');
    $query->fieldCondition('field_os2intra_organisation', 'target_id', $tid, '=');
    $result = $query->execute();

    if ($result) {
      return key($result['node']);
    }
  }
  return FALSE;
}

/**
 * Convert numeric values into integers, else return the string as utf8.
 */
function _os2intra_user_import_sanitize_int($str) {
  if (is_numeric($str)) {
    return (int) $str;
  }
  return utf8_encode($str);
}

/**
 * Add user to parent departments
 */
function os2intra_user_import_add_user_to_parent_departments($account) {
  $og_department_node = node_load(field_get_items('user', $account, 'og_user_node2')[0]['target_id']);
  if (empty($og_department_node)) {
    return;
  }
  $organisation_tid = field_get_items('node', $og_department_node, 'field_os2intra_organisation')[0]['target_id'];

  // Add user to their primary department and give them the 'medarbejder' role
  $values = array(
    'entity' => $account,
    'field_name' => 'og_org_ref',
  );
  og_group('node', $og_department_node->nid, $values);
  og_role_grant('node', $og_department_node->nid, $account->uid, variable_get('os2intra_user_import_og_role_id_primary', 16));

  // Add user to all parent departments and give 'organisatorisk' role on them.
  $parent_terms = taxonomy_get_parents_all($organisation_tid);

  foreach ($parent_terms as $parent_term) {
    $parent_tids[] = $parent_term->tid;
  }

  // Find the node ID for each department in parent terms
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'os2intra_org_group_unit');
  $query->fieldCondition('field_os2intra_organisation', 'target_id', $parent_tids, 'IN');
  $results = $query->execute();

  if (isset($results['node'])) {
    foreach ($results['node'] as $result) {
      $og_group_node_ids[] = $result->nid;
    }

    $values = array(
      'entity' => $account,
      'field_name' => 'og_org_ref',
    );

    foreach ($og_group_node_ids as $nid) {
      // Add the user to the group and set role.
      og_group('node', $nid, $values);
      og_role_grant('node', $nid, $account->uid, variable_get('os2intra_user_import_og_role_id_parent', 14));
    }
  }
}

/**
 * Give department managers 'manager-role' to the departments children
 */
function os2intra_user_import_add_managers_to_departments($form, &$form_state) {
  $department = entity_metadata_wrapper('taxonomy_term', $form['#term']['tid']);

  // Get department children
  $department_children = taxonomy_get_tree(16, $department->tid->value());

  // Get department managers
  foreach ($department->field_os2intra_manager_id->getIterator() as $user) {
    $manager_uids[] = $user->uid->value();
  }

  // Add user to their primary department and give them the 'manager' role
  if (!empty($manager_uids)) {
    foreach ($manager_uids as $manager_uid) {
      if (!in_array($manager_uid, $department->field_os2intra_manager_id->raw())) {
        $department->field_os2intra_manager_id[] = $manager_uid;
      }
      $account = user_load($manager_uid);
      // Add user to their primary department and give them the 'manager' role
      $values = array(
        'entity' => $account,
        'field_name' => 'og_org_ref',
      );
      if (!empty($department->field_os2intra_department_id->value())) {
        $department_nid = _os2intra_user_import_get_department_nid($department->field_os2intra_department_id->value());
        if ($department_nid) {
          og_group('node', $department_nid, $values);
          og_role_grant('node', $department_nid, $account->uid, variable_get('os2intra_user_import_og_role_id_manager', 15));
        }
      }
    }
  }

  $department->save();

  // Do the same thing for children departments
  foreach ($department_children as $child) {
    $child = entity_metadata_wrapper('taxonomy_term', $child->tid);

    if (!empty($manager_uids)) {
      foreach ($manager_uids as $manager_uid) {
        if (!in_array($manager_uid, $child->field_os2intra_manager_id->raw())) {
          $child->field_os2intra_manager_id[] = $manager_uid;
        }
        $account = user_load($manager_uid);
        // Add user to their primary department and give them the 'manager' role
        $values = array(
          'entity' => $account,
          'field_name' => 'og_org_ref',
        );
        if (!empty($child->field_os2intra_department_id->value())) {
          $department_nid = _os2intra_user_import_get_department_nid($child->field_os2intra_department_id->value());
          if ($department_nid) {
            og_group('node', $department_nid, $values);
            og_role_grant('node', $department_nid, $account->uid, variable_get('os2intra_user_import_og_role_id_manager', 15));
          }
        }
      }
    }

    $child->save();
  }
}
